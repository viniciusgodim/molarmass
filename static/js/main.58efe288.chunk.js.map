{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MoleculeWrapper","useState","atomicWeight","periodic","reduce","acc","cur","Symbol","AtomicMass","CalculateMolarMass","molState","moleculeArray","match","molarMass","i","length","isNaN","Molecule","props","moleculeState","setMoleculeState","clickState","setClickState","className","type","onChange","event","target","value","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAIMA,EAAkB,WACtB,IAD4B,EAELC,mBAAS,GAFJ,mBAGtBC,GAHsB,UAGPC,EAASC,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAIC,OAASD,EAAIE,eAAe,KACzFC,EAAqB,SAACC,GACxB,IAAIC,EAAgBD,EAASE,MAAO,8BAChCC,EAAY,EAChB,GAAsB,OAAlBF,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAKH,EAAcI,OAASD,IACrCE,MAAML,EAAcG,MAErBE,MAAML,EAAcG,EAAE,MACtBD,GAAaX,EAAaS,EAAcG,KAExCE,MAAML,EAAcG,EAAE,MACxBD,GAAaX,EAAaS,EAAcG,IAAIH,EAAcG,EAAE,KAIlE,OACED,GAGAI,EAAW,SAAXA,EAAYC,GAAW,IAAD,EACgBjB,mBAAS,KADzB,mBACnBkB,EADmB,KACJC,EADI,OAGSnB,oBAAS,GAHlB,mBAGnBoB,EAHmB,KAGRC,EAHQ,KAY1B,OACE,qCACA,uBAAMC,UAAU,YAAhB,UACA,wDACI,gCACA,uBAAOC,KAAK,OACRC,SAAU,SAAAC,GAAUN,EAAiBM,EAAMC,OAAOC,eAM1D,8BAAMnB,EAAmBU,KACzB,wBAAQU,QArBU,WAClBP,GAAeD,GACC,GAmBhB,sBACCA,EACD,8BACE,cAACJ,EAAD,MAEA,SAMN,OAAO,mCACL,cAACA,EAAD,OAeWa,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACG,cAAC,EAAD,OC9DQQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.58efe288.chunk.js","sourcesContent":["import './App.css';\nimport React,{useState,useEffect} from \"react\"\nimport periodic from \"./molar.json\"\n\nconst MoleculeWrapper = () => {\n  const dot = (a, b) => a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);\n  let [count,setCount] = useState(0);\n  const atomicWeight = periodic.reduce((acc, cur) => ({ ...acc, [cur.Symbol]: cur.AtomicMass }), {})\n  const CalculateMolarMass = (molState) => {\n      let moleculeArray = molState.match( /[A-Z]?[a-z]+|[0-9]+|[A-Z]/g);\n      let molarMass = 0\n      if (moleculeArray !== null) {\n        for (let i = 0; i < (moleculeArray.length); i++){\n          if (!isNaN(moleculeArray[i]))\n            {continue;}\n          if (isNaN(moleculeArray[i+1])){\n              molarMass += atomicWeight[moleculeArray[i]];\n          }\n          if(!isNaN(moleculeArray[i+1])){\n            molarMass += atomicWeight[moleculeArray[i]]*moleculeArray[i+1];\n          }\n        }\n      }\n      return(\n        molarMass\n      );\n  }\n  const Molecule = (props) => {\n    const [moleculeState, setMoleculeState] = useState(\"0\");\n\n    const [clickState,setClickState] = useState(false);\n    const HandleClick = () => {\n      setClickState(!clickState);\n      count = count + 1\n    }\n    const handleChange = (event) => {\n      setMoleculeState(event.target.value);\n    }\n\n    return(\n      <>\n      <form className=\"inputForm\">\n      <p>Enter chemical formula:</p>\n          <label>\n          <input type=\"text\"\n              onChange={event => {setMoleculeState(event.target.value);\n            }\n            }\n            />\n          </label>\n      </form>\n      <div>{CalculateMolarMass(moleculeState)}</div>\n      <button onClick = {HandleClick} > Add new</button>\n      {clickState ?\n      <div>\n        <Molecule />\n      </div>\n      : null}\n      </>\n    )\n  }\n\n\n  return(<>\n    <Molecule />\n    </>\n  )\n}\n\n\n\nfunction App() {\n  return(\n    <div className=\"App\">\n       <MoleculeWrapper />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}