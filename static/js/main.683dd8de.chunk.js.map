{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Molecule","atomicWeight","periodic","reduce","acc","cur","Symbol","AtomicMass","useState","moleculeState","setMoleculeState","CalculateMolarMass","moleculeArray","match","molarMass","i","length","isNaN","id","toFixed","type","name","onChange","event","target","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAIMA,EAAW,WAEf,IAAMC,EAAeC,EAASC,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAIC,OAASD,EAAIE,eAAe,IAF1E,EAGqBC,mBAAS,KAH9B,mBAGdC,EAHc,KAGCC,EAHD,KAIfC,EAAqB,WAIvB,IAHA,IAAIC,EAAgBH,EAAcI,MAAO,8BAErCC,EAAY,EACPC,EAAI,EAAGA,EAAKH,EAAcI,OAASD,IACrCE,MAAML,EAAcG,MAErBE,MAAML,EAAcG,EAAE,MACtBD,GAAab,EAAaW,EAAcG,KAExCE,MAAML,EAAcG,EAAE,MACxBD,GAAab,EAAaW,EAAcG,IAAIH,EAAcG,EAAE,KAGhE,OACE,sBAAKG,GAAG,kBAAR,UAA2BJ,EAAUK,QAAQ,GAA7C,aAGN,OACE,qCACA,uBAAMD,GAAG,YAAT,UACA,wDACI,gCACE,uBAAOE,KAAK,OAAOC,KAAK,OACtBC,SAAU,SAAAC,GAAUb,EAAiBa,EAAMC,OAAOC,OAClDd,YAGR,cAACA,EAAD,QAaWe,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OChCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.683dd8de.chunk.js","sourcesContent":["import './App.css';\nimport React,{useState} from \"react\"\nimport periodic from \"./molar.json\"\n\nconst Molecule = () => {\n\n  const atomicWeight = periodic.reduce((acc, cur) => ({ ...acc, [cur.Symbol]: cur.AtomicMass }), {})\n  const [moleculeState, setMoleculeState] = useState(\"0\");\n  const CalculateMolarMass = () => {\n      let moleculeArray = moleculeState.match( /[A-Z]?[a-z]+|[0-9]+|[A-Z]/g);\n\n      let molarMass = 0\n      for (let i = 0; i < (moleculeArray.length); i++){\n        if (!isNaN(moleculeArray[i]))\n          {continue;}\n        if (isNaN(moleculeArray[i+1])){\n            molarMass += atomicWeight[moleculeArray[i]];\n        }\n        if(!isNaN(moleculeArray[i+1])){\n          molarMass += atomicWeight[moleculeArray[i]]*moleculeArray[i+1];\n        }\n      }\n      return(\n        <div id=\"molarMassResult\">{molarMass.toFixed(3)} g/mol</div>\n      );\n  }\n  return(\n    <>\n    <form id=\"inputForm\">\n    <p>Enter chemical formula:</p>\n        <label>\n          <input type=\"text\" name=\"name\"\n            onChange={event => {setMoleculeState(event.target.value);\n            CalculateMolarMass()}} />\n        </label>\n    </form>\n    <CalculateMolarMass />\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Molecule />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}